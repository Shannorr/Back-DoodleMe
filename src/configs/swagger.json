openapi: 3.0.0
info:
  title: doodleMe
  version: 1.0.0
servers:
  - url: http://localhost:8080
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: login
  - name: test
  - name: event
  - name: user
  - name: creneau
  - name: reponse
  - name: favoris
paths:
  /api/auth/signup:
    post:
      tags:
        - login
      summary: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: Shadows
                lastname: Jacob
                firstname: Nicolas
                password: nicolas
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/auth/signin:
    post:
      tags:
        - login
      summary: signin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: Shadows
                password: nicolas
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/test/user:
    get:
      tags:
        - test
      summary: testUser
      security:
        - bearerAuth: []
      parameters:
        - name: x-access-token
          in: header
          schema:
            type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImlhdCI6MTY1MzM4MzA4OSwiZXhwIjoxNjUzMzk4MDg5fQ.iVtUH7i1Q-DHl3n5hReCxh7_Ux-tq6tzgxygMlfuwDM
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events:
    post:
      tags:
        - event
      summary: create event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Nouvelle matière s2
                description: ''
                cloture: false
                idcreator: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - event
      summary: get * event
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/2:
    get:
      tags:
        - event
      summary: get event by id
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - event
      summary: close event
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/reponse/1:
    get:
      tags:
        - event
      summary: récupérer les evenments auquels l'utilisateur à répondu
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/created/1:
    get:
      tags:
        - event
      summary: récupérer tout les evenement créer par un utilisateur
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/events/last/1:
    get:
      tags:
        - event
      summary: récupérer le dernier event
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/1:
    get:
      tags:
        - user
      summary: getUserByid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/creneau/2:
    get:
      tags:
        - user
      summary: getUserWhoReponseToCreneau
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/creneau:
    post:
      tags:
        - creneau
      summary: create creneau
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                date: '2022-05-25'
                heureDebut: '13:00:00'
                idEvent: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/creneau/1:
    get:
      tags:
        - creneau
      summary: getAllCreneauWithAnEvent
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/creneau/winner/1:
    get:
      tags:
        - creneau
      summary: créneau avec le plus grand nombre de rép pour un event
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/creneau/creneau/2:
    get:
      tags:
        - creneau
      summary: getCreneauByid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/reponse:
    post:
      tags:
        - reponse
      summary: Add reponse
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                idCreneau: 2
                idUser: 1
                reponse: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/favoris:
    post:
      tags:
        - favoris
      summary: create favoris
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                idEvent: 1
                idUser: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - favoris
      summary: delete favoris
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/favoris/event/1:
    get:
      tags:
        - favoris
      summary: Get Favoris By id User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}